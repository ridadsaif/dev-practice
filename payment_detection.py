# -*- coding: utf-8 -*-
"""Payment_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OUQe2hq1BGlR7ITxcCXgfmD-R_qXbVo1
"""

import pandas as pd
import pickle
import numpy as np
import nltk
from nltk.corpus import stopwords
from langdetect import detect
import re
import scipy
import math

df = pd.read_csv('Copy of first_cut_data_annotated_and_encoded_with_sentiment.csv')

reference_word = "payment"

with open("model1.pickle", "rb") as handle1:
    model1 = pickle.load(handle1)
with open("model2.pickle", "rb") as handle2:
    model2 = pickle.load(handle2)
model = {**model1, **model2}
en_words = list(model.keys())

def preprocess(raw_text):

    # keep only words
    letters_only_text = re.sub("[^a-zA-Z]", " ", raw_text)

    # convert to lower case and split
    words = letters_only_text.lower().split()

    # remove stopwords
    stopword_set = list(set(stopwords.words("english")))
    stopword_set.append("among")
    cleaned_words = list(set([w for w in words if w not in stopword_set]))

    return cleaned_words

def cosine_distance_wordembedding_method(sentence_one1, sentence_two):
    vector_one = np.mean(
        [model[word] for word in preprocess(sentence_one1) if word in en_words], axis=0
    )
    vector_two = np.mean(
        [model[word] for word in preprocess(sentence_two) if word in en_words], axis=0
    )

    cosine = scipy.spatial.distance.cosine(vector_one, vector_two)
    if math.isnan(cosine):
        cosine = 1
    return round((1 - cosine) * 100, 2)

def is_english(text):
    try:
        lang = detect(text)
        return lang == 'en'
    except:
        return False

payment_bools = []
for index, row in df.iterrows():
    text = row['GoogleTranslate']
    is_english_bool = is_english(text)
    if is_english_bool:
        try:
            score = cosine_distance_wordembedding_method(text, reference_word)
        except ValueError:
            score = 0
        if score > 50:
            payment_present = 1
        else:
            payment_present = 0
        payment_bools.append(payment_present)
    else:
        payment_bools.append(0)

df['payment_present'] = payment_bools

df.to_csv("df_with_payment_encoding.csv")